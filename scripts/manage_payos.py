#!/usr/bin/env python3
"""
Script ƒë·ªÉ admin qu·∫£n l√Ω PayOS credentials cho t·ª´ng owner
"""

import sys
import os
import importlib.util
import sys as _sys

# Add the project root to Python path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# Also set it in the environment for subprocesses
os.environ['PYTHONPATH'] = project_root + (os.pathsep + os.environ.get('PYTHONPATH', ''))

app_py_path = os.path.join(project_root, 'app.py')
spec = importlib.util.spec_from_file_location('app_main', app_py_path)
app_module = importlib.util.module_from_spec(spec)
_sys.modules['app_main'] = app_module
spec.loader.exec_module(app_module)
flask_app = app_module.app

from app.models.models import db, PaymentConfig, Owner
from datetime import datetime

def list_all_owners():
    """Li·ªát k√™ t·∫•t c·∫£ owners v√† tr·∫°ng th√°i PayOS config"""
    print("üìã Danh s√°ch t·∫•t c·∫£ owners:")
    print("-" * 80)
    
    with flask_app.app_context():
        try:
            owners = Owner.query.all()
            configs = PaymentConfig.query.all()
            
            config_map = {config.owner_id: config for config in configs}
            
            for i, owner in enumerate(owners, 1):
                config = config_map.get(owner.id)
                status = "‚úÖ C√≥ config" if config else "‚ùå Ch∆∞a c√≥"
                active_status = "üü¢ Ho·∫°t ƒë·ªông" if config and config.is_active else "üî¥ Kh√¥ng ho·∫°t ƒë·ªông" if config else ""
                
                print(f"{i:2d}. {owner.username} ({owner.full_name})")
                print(f"     Email: {owner.email}")
                print(f"     PayOS: {status} {active_status}")
                
                if config:
                    print(f"     Client ID: {config.payos_client_id[:8]}...")
                    print(f"     C·∫≠p nh·∫≠t: {config.updated_at.strftime('%d/%m/%Y %H:%M')}")
                
                print("-" * 80)
            
            return owners, configs
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch owners: {e}")
            return [], []

def setup_payos_for_owner(owner_id):
    """Thi·∫øt l·∫≠p PayOS cho owner c·ª• th·ªÉ"""
    print(f"\nüîß Thi·∫øt l·∫≠p PayOS cho owner ID {owner_id}...")
    
    with flask_app.app_context():
        try:
            owner = Owner.query.get(owner_id)
            if not owner:
                print("‚ùå Kh√¥ng t√¨m th·∫•y owner!")
                return False
            
            print(f"Owner: {owner.username} ({owner.full_name})")
            
            # Nh·∫≠p th√¥ng tin PayOS
            print("\nNh·∫≠p th√¥ng tin PayOS:")
            client_id = input("Client ID: ").strip()
            api_key = input("API Key: ").strip()
            checksum_key = input("Checksum Key: ").strip()
            
            if not all([client_id, api_key, checksum_key]):
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                return False
            
            # Ki·ªÉm tra config hi·ªán t·∫°i
            existing_config = PaymentConfig.query.filter_by(owner_id=owner_id).first()
            
            if existing_config:
                # C·∫≠p nh·∫≠t
                existing_config.payos_client_id = client_id
                existing_config.payos_api_key = api_key
                existing_config.payos_checksum_key = checksum_key
                existing_config.is_active = True
                existing_config.updated_at = datetime.utcnow()
                print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t PayOS config")
            else:
                # T·∫°o m·ªõi
                config = PaymentConfig(
                    owner_id=owner_id,
                    payos_client_id=client_id,
                    payos_api_key=api_key,
                    payos_checksum_key=checksum_key,
                    is_active=True
                )
                db.session.add(config)
                print("‚úÖ ƒê√£ t·∫°o PayOS config m·ªõi")
            
            db.session.commit()
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi thi·∫øt l·∫≠p PayOS: {e}")
            db.session.rollback()
            return False

def update_payos_for_owner(owner_id):
    """C·∫≠p nh·∫≠t PayOS cho owner c·ª• th·ªÉ"""
    print(f"\nüîÑ C·∫≠p nh·∫≠t PayOS cho owner ID {owner_id}...")
    
    with flask_app.app_context():
        try:
            owner = Owner.query.get(owner_id)
            config = PaymentConfig.query.filter_by(owner_id=owner_id).first()
            
            if not owner:
                print("‚ùå Kh√¥ng t√¨m th·∫•y owner!")
                return False
            
            if not config:
                print("‚ùå Owner ch∆∞a c√≥ PayOS config!")
                return False
            
            print(f"Owner: {owner.username} ({owner.full_name})")
            print(f"Client ID hi·ªán t·∫°i: {config.payos_client_id[:8]}...")
            
            # Nh·∫≠p th√¥ng tin m·ªõi
            print("\nNh·∫≠p th√¥ng tin PayOS m·ªõi (Enter ƒë·ªÉ gi·ªØ nguy√™n):")
            client_id = input(f"Client ID [{config.payos_client_id[:8]}...]: ").strip()
            api_key = input("API Key (Enter ƒë·ªÉ gi·ªØ nguy√™n): ").strip()
            checksum_key = input("Checksum Key (Enter ƒë·ªÉ gi·ªØ nguy√™n): ").strip()
            
            # C·∫≠p nh·∫≠t n·∫øu c√≥ thay ƒë·ªïi
            if client_id:
                config.payos_client_id = client_id
            if api_key:
                config.payos_api_key = api_key
            if checksum_key:
                config.payos_checksum_key = checksum_key
            
            config.updated_at = datetime.utcnow()
            db.session.commit()
            
            print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t PayOS config")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t PayOS: {e}")
            db.session.rollback()
            return False

def delete_payos_for_owner(owner_id):
    """X√≥a PayOS config cho owner c·ª• th·ªÉ"""
    print(f"\nüóëÔ∏è X√≥a PayOS config cho owner ID {owner_id}...")
    
    with flask_app.app_context():
        try:
            owner = Owner.query.get(owner_id)
            config = PaymentConfig.query.filter_by(owner_id=owner_id).first()
            
            if not owner:
                print("‚ùå Kh√¥ng t√¨m th·∫•y owner!")
                return False
            
            if not config:
                print("‚ùå Owner ch∆∞a c√≥ PayOS config!")
                return False
            
            print(f"Owner: {owner.username} ({owner.full_name})")
            print(f"Client ID: {config.payos_client_id[:8]}...")
            
            confirm = input("\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a? (y/N): ")
            if confirm.lower() != 'y':
                print("‚ùå ƒê√£ h·ªßy thao t√°c.")
                return False
            
            db.session.delete(config)
            db.session.commit()
            
            print("‚úÖ ƒê√£ x√≥a PayOS config")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a PayOS: {e}")
            db.session.rollback()
            return False

def toggle_payos_status(owner_id):
    """B·∫≠t/t·∫Øt PayOS config cho owner"""
    print(f"\nüîÑ Thay ƒë·ªïi tr·∫°ng th√°i PayOS cho owner ID {owner_id}...")
    
    with flask_app.app_context():
        try:
            owner = Owner.query.get(owner_id)
            config = PaymentConfig.query.filter_by(owner_id=owner_id).first()
            
            if not owner:
                print("‚ùå Kh√¥ng t√¨m th·∫•y owner!")
                return False
            
            if not config:
                print("‚ùå Owner ch∆∞a c√≥ PayOS config!")
                return False
            
            print(f"Owner: {owner.username} ({owner.full_name})")
            print(f"Tr·∫°ng th√°i hi·ªán t·∫°i: {'üü¢ Ho·∫°t ƒë·ªông' if config.is_active else 'üî¥ Kh√¥ng ho·∫°t ƒë·ªông'}")
            
            config.is_active = not config.is_active
            config.updated_at = datetime.utcnow()
            db.session.commit()
            
            new_status = "üü¢ Ho·∫°t ƒë·ªông" if config.is_active else "üî¥ Kh√¥ng ho·∫°t ƒë·ªông"
            print(f"‚úÖ ƒê√£ thay ƒë·ªïi tr·∫°ng th√°i th√†nh: {new_status}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i: {e}")
            db.session.rollback()
            return False

def main():
    """Main function"""
    print("üöÄ PayOS Management Tool")
    print("=" * 50)
    
    while True:
        print("\nüìã Menu:")
        print("1. Xem danh s√°ch owners")
        print("2. Thi·∫øt l·∫≠p PayOS cho owner")
        print("3. C·∫≠p nh·∫≠t PayOS cho owner")
        print("4. X√≥a PayOS config")
        print("5. B·∫≠t/t·∫Øt PayOS config")
        print("0. Tho√°t")
        
        choice = input("\nCh·ªçn t√πy ch·ªçn (0-5): ").strip()
        
        if choice == '0':
            print("üëã T·∫°m bi·ªát!")
            break
        
        elif choice == '1':
            list_all_owners()
        
        elif choice == '2':
            owner_id = input("Nh·∫≠p Owner ID: ").strip()
            if owner_id.isdigit():
                setup_payos_for_owner(int(owner_id))
            else:
                print("‚ùå ID kh√¥ng h·ª£p l·ªá!")
        
        elif choice == '3':
            owner_id = input("Nh·∫≠p Owner ID: ").strip()
            if owner_id.isdigit():
                update_payos_for_owner(int(owner_id))
            else:
                print("‚ùå ID kh√¥ng h·ª£p l·ªá!")
        
        elif choice == '4':
            owner_id = input("Nh·∫≠p Owner ID: ").strip()
            if owner_id.isdigit():
                delete_payos_for_owner(int(owner_id))
            else:
                print("‚ùå ID kh√¥ng h·ª£p l·ªá!")
        
        elif choice == '5':
            owner_id = input("Nh·∫≠p Owner ID: ").strip()
            if owner_id.isdigit():
                toggle_payos_status(int(owner_id))
            else:
                print("‚ùå ID kh√¥ng h·ª£p l·ªá!")
        
        else:
            print("‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main() 