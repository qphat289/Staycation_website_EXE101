import re
import string

class PasswordValidator:
    """ƒê√°nh gi√° ƒë·ªô m·∫°nh m·∫≠t kh·∫©u theo 3 m·ª©c ƒë·ªô: Y·∫æU, TRUNG B√åNH, M·∫†NH"""
    
    # Danh s√°ch m·∫≠t kh·∫©u ph·ªï bi·∫øn (top 100)
    COMMON_PASSWORDS = {
        '123456', 'password', '123456789', '12345678', '12345', 'qwerty', 'abc123',
        '1234567', '111111', '1234', 'admin', 'letmein', 'welcome', 'monkey',
        '1234567890', 'dragon', 'master', 'hello', 'freedom', 'whatever', 'qazwsx',
        'trustno1', 'jordan', 'harley', 'ranger', 'iwantu', 'jennifer', 'hunter',
        'buster', 'soccer', 'tiger', 'charlie', 'andrew', 'michelle', 'love',
        'sunshine', 'jessica', 'asshole', 'fuckme', '2000', 'chocolate', 'rangers',
        'phoenix', 'mickey', 'secret', 'summer', 'internet', 'service', 'canada',
        'cooper', 'jonathan', 'liverpool', 'david', 'diamond', 'chelsea', 'biteme',
        'silver', 'gordon', 'casper', 'stupid', 'saturn', 'gemini', 'apples',
        'august', 'canes', 'blowme', 'rover', 'parker', '55555', 'puppies',
        'heaven', 'newyork', 'little', '98765', 'business', 'maggie', 'quinn',
        'cowboys', 'cooper', 'mickey', 'biteme', 'lovely', 'andrea', 'trevor',
        'rocky', 'bubbles', 'shotgun', 'dolphin', 'griffin', 'cool', 'beer',
        'rock', 'tiger', 'reddog', 'summer', 'april', 'sierra', 'fallout',
        'naomi', 'bulldog', 'king', 'maddog', 'queen', 'jordan', 'swimming',
        'dolphins', 'gordon', 'casper', 'stupid', 'saturn', 'gemini', 'apples',
        'august', 'canes', 'blowme', 'rover', 'parker', '55555', 'puppies',
        'heaven', 'newyork', 'little', '98765', 'business', 'maggie', 'quinn'
    }
    
    # T·ª´ ƒëi·ªÉn ti·∫øng Vi·ªát ph·ªï bi·∫øn
    VIETNAMESE_WORDS = {
        'matkhau', 'password', 'admin', 'user', 'login', 'dangnhap', 'taikhoan',
        'account', 'email', 'gmail', 'hotmail', 'yahoo', 'facebook', 'google',
        'youtube', 'instagram', 'twitter', 'linkedin', 'github', 'stackoverflow',
        'microsoft', 'apple', 'samsung', 'sony', 'nokia', 'motorola', 'htc',
        'lg', 'asus', 'acer', 'dell', 'hp', 'lenovo', 'toshiba', 'fujitsu',
        'canon', 'nikon', 'sony', 'panasonic', 'sharp', 'philips', 'samsung',
        'lg', 'toshiba', 'hitachi', 'mitsubishi', 'daikin', 'carrier', 'gree',
        'midea', 'haier', 'tcl', 'hisense', 'skyworth', 'changhong', 'konka',
        'coocaa', 'oppo', 'vivo', 'xiaomi', 'huawei', 'honor', 'oneplus',
        'realme', 'iqoo', 'meizu', 'zte', 'coolpad', 'gionee', 'lenovo',
        'motorola', 'nokia', 'blackberry', 'htc', 'lg', 'sony', 'samsung',
        'apple', 'iphone', 'ipad', 'macbook', 'imac', 'macpro', 'airpods',
        'applewatch', 'appletv', 'homepod', 'airtag', 'magicmouse', 'magicpad',
        'magickeyboard', 'magictrackpad', 'magicmouse', 'magicpad', 'magickeyboard'
    }
    
    @staticmethod
    def evaluate_password(password):
        """
        ƒê√°nh gi√° m·∫≠t kh·∫©u v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ chi ti·∫øt
        
        Args:
            password (str): M·∫≠t kh·∫©u c·∫ßn ƒë√°nh gi√°
            
        Returns:
            dict: K·∫øt qu·∫£ ƒë√°nh gi√° v·ªõi c√°c th√¥ng tin chi ti·∫øt
        """
        if not password:
            return {
                'strength': 'Y·∫æU',
                'score': 0,
                'details': ['M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'],
                'suggestions': ['Nh·∫≠p m·∫≠t kh·∫©u'],
                'is_acceptable': False
            }
        
        password = str(password)
        length = len(password)
        score = 0
        details = []
        suggestions = []
        
        # Ki·ªÉm tra ƒë·ªô d√†i
        if length <= 5:
            details.append('ƒê·ªô d√†i qu√° ng·∫Øn (‚â§ 5 k√Ω t·ª±)')
            suggestions.append('TƒÉng ƒë·ªô d√†i m·∫≠t kh·∫©u l√™n √≠t nh·∫•t 6 k√Ω t·ª±')
        elif length >= 8:
            score += 2
            details.append('ƒê·ªô d√†i t·ªët (‚â• 8 k√Ω t·ª±)')
        else:
            score += 1
            details.append('ƒê·ªô d√†i trung b√¨nh (6-7 k√Ω t·ª±)')
            suggestions.append('TƒÉng ƒë·ªô d√†i m·∫≠t kh·∫©u l√™n √≠t nh·∫•t 8 k√Ω t·ª±')
        
        # Ki·ªÉm tra c√°c lo·∫°i k√Ω t·ª±
        has_lower = bool(re.search(r'[a-z]', password))
        has_upper = bool(re.search(r'[A-Z]', password))
        has_digit = bool(re.search(r'\d', password))
        has_special = bool(re.search(r'[!@#$%^&*()_+\-=\[\]{};\':"\\|,.<>\/?]', password))
        
        char_types = sum([has_lower, has_upper, has_digit, has_special])
        
        if char_types == 1:
            details.append('Ch·ªâ s·ª≠ d·ª•ng 1 lo·∫°i k√Ω t·ª±')
            suggestions.append('K·∫øt h·ª£p nhi·ªÅu lo·∫°i k√Ω t·ª± (ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát)')
        elif char_types == 2:
            score += 1
            details.append('S·ª≠ d·ª•ng 2 lo·∫°i k√Ω t·ª±')
            suggestions.append('Th√™m k√Ω t·ª± ƒë·∫∑c bi·ªát ƒë·ªÉ tƒÉng ƒë·ªô m·∫°nh')
        elif char_types >= 3:
            score += 2
            details.append(f'S·ª≠ d·ª•ng {char_types} lo·∫°i k√Ω t·ª±')
        
        # Ki·ªÉm tra m·∫≠t kh·∫©u ph·ªï bi·∫øn
        if password.lower() in PasswordValidator.COMMON_PASSWORDS:
            details.append('M·∫≠t kh·∫©u qu√° ph·ªï bi·∫øn')
            suggestions.append('Tr√°nh s·ª≠ d·ª•ng m·∫≠t kh·∫©u ph·ªï bi·∫øn')
            score -= 2
        
        # Ki·ªÉm tra t·ª´ ƒëi·ªÉn ti·∫øng Vi·ªát
        if password.lower() in PasswordValidator.VIETNAMESE_WORDS:
            details.append('S·ª≠ d·ª•ng t·ª´ ƒëi·ªÉn ti·∫øng Vi·ªát')
            suggestions.append('Tr√°nh s·ª≠ d·ª•ng t·ª´ c√≥ nghƒ©a')
            score -= 1
        
        # Ki·ªÉm tra pattern d·ªÖ ƒëo√°n
        if re.search(r'(.)\1{2,}', password):  # K√Ω t·ª± l·∫∑p l·∫°i 3 l·∫ßn tr·ªü l√™n
            details.append('C√≥ k√Ω t·ª± l·∫∑p l·∫°i')
            suggestions.append('Tr√°nh l·∫∑p l·∫°i k√Ω t·ª± li√™n ti·∫øp')
            score -= 1
        
        if re.search(r'(123|abc|qwe|asd|zxc)', password.lower()):
            details.append('C√≥ pattern d·ªÖ ƒëo√°n')
            suggestions.append('Tr√°nh s·ª≠ d·ª•ng pattern ph·ªï bi·∫øn')
            score -= 1
        
        # Ki·ªÉm tra th√¥ng tin c√° nh√¢n d·ªÖ ƒëo√°n
        personal_patterns = [
            r'\b\d{4}\b',  # NƒÉm sinh
            r'\b\d{2}\b',  # Ng√†y/th√°ng
            r'\b\d{10,11}\b',  # S·ªë ƒëi·ªán tho·∫°i
        ]
        
        for pattern in personal_patterns:
            if re.search(pattern, password):
                details.append('C√≥ th·ªÉ ch·ª©a th√¥ng tin c√° nh√¢n')
                suggestions.append('Tr√°nh s·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n')
                score -= 1
                break
        
        # X√°c ƒë·ªãnh ƒë·ªô m·∫°nh
        if score <= 0:
            strength = 'Y·∫æU'
            is_acceptable = False
        elif score <= 2:
            strength = 'TRUNG B√åNH'
            is_acceptable = True
        else:
            strength = 'M·∫†NH'
            is_acceptable = True
        
        # Th√™m g·ª£i √Ω chung
        if strength == 'Y·∫æU':
            suggestions.extend([
                'S·ª≠ d·ª•ng √≠t nh·∫•t 6 k√Ω t·ª±',
                'K·∫øt h·ª£p ch·ªØ hoa, ch·ªØ th∆∞·ªùng v√† s·ªë',
                'Tr√°nh th√¥ng tin c√° nh√¢n'
            ])
        elif strength == 'TRUNG B√åNH':
            suggestions.extend([
                'TƒÉng ƒë·ªô d√†i l√™n 8 k√Ω t·ª± tr·ªü l√™n',
                'Th√™m k√Ω t·ª± ƒë·∫∑c bi·ªát',
                'Tr√°nh pattern d·ªÖ ƒëo√°n'
            ])
        else:  # M·∫†NH
            suggestions.append('M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë·ªß m·∫°nh!')
        
        return {
            'strength': strength,
            'score': score,
            'details': details,
            'suggestions': suggestions,
            'is_acceptable': is_acceptable,
            'length': length,
            'char_types': char_types,
            'has_lower': has_lower,
            'has_upper': has_upper,
            'has_digit': has_digit,
            'has_special': has_special
        }
    
    @staticmethod
    def get_password_display(password):
        """
        Tr·∫£ v·ªÅ m·∫≠t kh·∫©u ƒë∆∞·ª£c ·∫©n m·ªôt ph·∫ßn ƒë·ªÉ hi·ªÉn th·ªã
        
        Args:
            password (str): M·∫≠t kh·∫©u g·ªëc
            
        Returns:
            str: M·∫≠t kh·∫©u ƒë∆∞·ª£c ·∫©n m·ªôt ph·∫ßn
        """
        if not password:
            return ''
        
        length = len(password)
        if length <= 2:
            return '*' * length
        elif length <= 4:
            return password[0] + '*' * (length - 1)
        else:
            return password[0] + '*' * (length - 2) + password[-1]
    
    @staticmethod
    def format_evaluation_result(password):
        """
        Format k·∫øt qu·∫£ ƒë√°nh gi√° theo y√™u c·∫ßu
        
        Args:
            password (str): M·∫≠t kh·∫©u c·∫ßn ƒë√°nh gi√°
            
        Returns:
            str: K·∫øt qu·∫£ ƒë∆∞·ª£c format
        """
        result = PasswordValidator.evaluate_password(password)
        display_password = PasswordValidator.get_password_display(password)
        
        formatted_result = f"""üîê ƒê√ÅNH GI√Å M·∫¨T KH·∫®U

M·∫≠t kh·∫©u: {display_password}
ƒê·ªô m·∫°nh: {result['strength']}

üìã Chi ti·∫øt:
"""
        
        for detail in result['details']:
            formatted_result += f"‚Ä¢ {detail}\n"
        
        if result['suggestions']:
            formatted_result += "\nüí° G·ª£i √Ω c·∫£i thi·ªán:\n"
            for suggestion in result['suggestions']:
                formatted_result += f"‚Ä¢ {suggestion}\n"
        
        return formatted_result 