import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import current_app
import random
import string
from datetime import datetime, timedelta
import json
import hashlib
import hmac
import base64
import logging
from config.email_config import EmailConfig

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmailService:
    def __init__(self):
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        self.otp_expiry_minutes = 2  # Thay ƒë·ªïi th√†nh 2 ph√∫t
        self.max_resend_per_day = 3  # Gi·∫£m xu·ªëng 3 l·∫ßn/ng√†y
        self.max_attempts_per_otp = 3  # Gi·∫£m xu·ªëng 3 l·∫ßn th·ª≠/OTP
        
    def _get_config(self):
        """L·∫•y c·∫•u h√¨nh email t·ª´ EmailConfig"""
        try:
            if not EmailConfig.is_configured():
                logger.error("Email configuration not found")
                return None
            
            config = EmailConfig.get_smtp_config()
            logger.info(f"Email config loaded: {config['username']}")
            return config
        except Exception as e:
            logger.error(f"Error loading email config: {e}")
            return None
    
    def generate_otp(self, length=6):
        """T·∫°o m√£ OTP ng·∫´u nhi√™n"""
        return ''.join(random.choices(string.digits, k=length))
    
    def generate_secure_token(self, otp, user_id, timestamp):
        """T·∫°o token b·∫£o m·∫≠t cho OTP"""
        # T·∫°o secret key t·ª´ app config ho·∫∑c fallback
        try:
            secret_key = current_app.config.get('SECRET_KEY', 'fallback-secret-key')
        except RuntimeError:
            secret_key = 'fallback-secret-key'
        
        # T·∫°o payload
        payload = f"{otp}:{user_id}:{timestamp}"
        
        # T·∫°o HMAC signature
        signature = hmac.new(
            secret_key.encode('utf-8'),
            payload.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        # Encode payload v√† signature
        token_data = f"{payload}:{signature}"
        return base64.urlsafe_b64encode(token_data.encode('utf-8')).decode('utf-8')
    
    def verify_secure_token(self, token, user_id):
        """X√°c th·ª±c token b·∫£o m·∫≠t"""
        try:
            # Decode token
            token_data = base64.urlsafe_b64decode(token.encode('utf-8')).decode('utf-8')
            payload, signature = token_data.rsplit(':', 1)
            
            # T√°ch payload
            otp, token_user_id, timestamp = payload.split(':', 2)
            
            # Ki·ªÉm tra user_id
            if int(token_user_id) != user_id:
                return None, None
            
            # T·∫°o secret key
            try:
                secret_key = current_app.config.get('SECRET_KEY', 'fallback-secret-key')
            except RuntimeError:
                secret_key = 'fallback-secret-key'
            
            # Verify signature
            expected_signature = hmac.new(
                secret_key.encode('utf-8'),
                payload.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            if not hmac.compare_digest(signature, expected_signature):
                return None, None
            
            return otp, timestamp
            
        except Exception as e:
            logger.error(f"Token verification failed: {e}")
            return None, None
    
    def send_verification_email(self, to_email, otp, owner_name, user_id):
        """G·ª≠i email ch·ª©a m√£ OTP ƒë·ªÉ verify email"""
        try:
            config = self._get_config()
            if not config:
                return False, "Email configuration not found", None
            
            # T·∫°o timestamp v√† token b·∫£o m·∫≠t
            timestamp = datetime.now().isoformat()
            secure_token = self.generate_secure_token(otp, user_id, timestamp)
            
            logger.info(f"Sending verification email to {to_email}")
            
            # T·∫°o message
            message = MIMEMultipart("alternative")
            message["Subject"] = "X√°c th·ª±c Email - Staycation"
            message["From"] = config['from_email']
            message["To"] = to_email
            
            # HTML content v·ªõi th·ªùi gian h·∫øt h·∫°n m·ªõi
            html_content = f"""
            <html>
            <body>
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; text-align: center;">
                        <h2 style="color: #007bff; margin-bottom: 20px;">üîí X√°c th·ª±c Email</h2>
                        <p style="font-size: 16px; color: #333; margin-bottom: 20px;">
                            Xin ch√†o <strong>{owner_name}</strong>,
                        </p>
                        <p style="font-size: 16px; color: #333; margin-bottom: 20px;">
                            ƒê·ªÉ ho√†n t·∫•t vi·ªác x√°c th·ª±c t√†i kho·∫£n, vui l√≤ng s·ª≠ d·ª•ng m√£ OTP d∆∞·ªõi ƒë√¢y:
                        </p>
                        <div style="background-color: #007bff; color: white; padding: 15px; border-radius: 8px; font-size: 24px; font-weight: bold; letter-spacing: 5px; margin: 20px 0;">
                            {otp}
                        </div>
                        <p style="font-size: 14px; color: #666; margin-bottom: 20px;">
                            M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>{self.otp_expiry_minutes} ph√∫t</strong>.
                        </p>
                        <p style="font-size: 14px; color: #666; margin-bottom: 20px;">
                            B·∫°n c√≥ th·ªÉ th·ª≠ t·ªëi ƒëa <strong>{self.max_attempts_per_otp} l·∫ßn</strong> v·ªõi m√£ n√†y.
                        </p>
                        <p style="font-size: 14px; color: #666; margin-bottom: 20px;">
                            N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.
                        </p>
                        <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
                        <p style="font-size: 12px; color: #999;">
                            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ h·ªá th·ªëng Staycation. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                        </p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            # Plain text content
            text_content = f"""
            X√°c th·ª±c Email - Staycation
            
            Xin ch√†o {owner_name},
            
            ƒê·ªÉ ho√†n t·∫•t vi·ªác x√°c th·ª±c t√†i kho·∫£n, vui l√≤ng s·ª≠ d·ª•ng m√£ OTP: {otp}
            
            M√£ n√†y c√≥ hi·ªáu l·ª±c trong {self.otp_expiry_minutes} ph√∫t.
            B·∫°n c√≥ th·ªÉ th·ª≠ t·ªëi ƒëa {self.max_attempts_per_otp} l·∫ßn v·ªõi m√£ n√†y.
            
            N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.
            
            ---
            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ h·ªá th·ªëng Staycation.
            """
            
            # Attach parts
            part1 = MIMEText(text_content, "plain")
            part2 = MIMEText(html_content, "html")
            message.attach(part1)
            message.attach(part2)
            
            # G·ª≠i email v·ªõi debug logging
            logger.info(f"Connecting to SMTP server: {self.smtp_server}:{self.smtp_port}")
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.set_debuglevel(1)  # Enable debug logging
                logger.info("Starting TLS connection...")
                server.starttls(context=context)
                logger.info("Logging in to SMTP server...")
                server.login(config['username'], config['password'])
                logger.info("Sending email...")
                server.sendmail(config['from_email'], to_email, message.as_string())
                logger.info("Email sent successfully!")
            
            return True, "Email sent successfully", secure_token
            
        except smtplib.SMTPAuthenticationError as e:
            error_msg = f"SMTP Authentication failed: {e}"
            logger.error(error_msg)
            return False, error_msg, None
        except smtplib.SMTPException as e:
            error_msg = f"SMTP error occurred: {e}"
            logger.error(error_msg)
            return False, error_msg, None
        except Exception as e:
            error_msg = f"Unexpected error: {e}"
            logger.error(error_msg)
            return False, error_msg, None
    
    def send_resend_otp_email(self, to_email, otp, owner_name, user_id):
        """G·ª≠i l·∫°i m√£ OTP"""
        try:
            config = self._get_config()
            if not config:
                return False, "Email configuration not found", None
            
            # T·∫°o timestamp v√† token b·∫£o m·∫≠t
            timestamp = datetime.now().isoformat()
            secure_token = self.generate_secure_token(otp, user_id, timestamp)
            
            logger.info(f"Resending OTP email to {to_email}")
            
            message = MIMEMultipart("alternative")
            message["Subject"] = "M√£ OTP m·ªõi - Staycation"
            message["From"] = config['from_email']
            message["To"] = to_email
            
            html_content = f"""
            <html>
            <body>
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; text-align: center;">
                        <h2 style="color: #007bff; margin-bottom: 20px;">üîÑ M√£ OTP m·ªõi</h2>
                        <p style="font-size: 16px; color: #333; margin-bottom: 20px;">
                            Xin ch√†o <strong>{owner_name}</strong>,
                        </p>
                        <p style="font-size: 16px; color: #333; margin-bottom: 20px;">
                            D∆∞·ªõi ƒë√¢y l√† m√£ OTP m·ªõi ƒë·ªÉ x√°c th·ª±c email:
                        </p>
                        <div style="background-color: #28a745; color: white; padding: 15px; border-radius: 8px; font-size: 24px; font-weight: bold; letter-spacing: 5px; margin: 20px 0;">
                            {otp}
                        </div>
                        <p style="font-size: 14px; color: #666; margin-bottom: 20px;">
                            M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>{self.otp_expiry_minutes} ph√∫t</strong>.
                        </p>
                        <p style="font-size: 14px; color: #666; margin-bottom: 20px;">
                            B·∫°n c√≥ th·ªÉ th·ª≠ t·ªëi ƒëa <strong>{self.max_attempts_per_otp} l·∫ßn</strong> v·ªõi m√£ n√†y.
                        </p>
                        <p style="font-size: 14px; color: #666; margin-bottom: 20px;">
                            N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.
                        </p>
                        <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
                        <p style="font-size: 12px; color: #999;">
                            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ h·ªá th·ªëng Staycation. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                        </p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            text_content = f"""
            M√£ OTP m·ªõi - Staycation
            
            Xin ch√†o {owner_name},
            
            D∆∞·ªõi ƒë√¢y l√† m√£ OTP m·ªõi ƒë·ªÉ x√°c th·ª±c email: {otp}
            
            M√£ n√†y c√≥ hi·ªáu l·ª±c trong {self.otp_expiry_minutes} ph√∫t.
            B·∫°n c√≥ th·ªÉ th·ª≠ t·ªëi ƒëa {self.max_attempts_per_otp} l·∫ßn v·ªõi m√£ n√†y.
            
            N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.
            
            ---
            Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ h·ªá th·ªëng Staycation.
            """
            
            part1 = MIMEText(text_content, "plain")
            part2 = MIMEText(html_content, "html")
            message.attach(part1)
            message.attach(part2)
            
            context = ssl.create_default_context()
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.set_debuglevel(1)  # Enable debug logging
                server.starttls(context=context)
                server.login(config['username'], config['password'])
                server.sendmail(config['from_email'], to_email, message.as_string())
            
            return True, "Resend email sent successfully", secure_token
            
        except Exception as e:
            error_msg = f"Failed to send resend email: {str(e)}"
            logger.error(error_msg)
            return False, error_msg, None

# Global instance
email_service = EmailService() 